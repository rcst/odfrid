// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// routing_matrix
arma::umat routing_matrix(arma::uword s);
RcppExport SEXP _odfrid_routing_matrix(SEXP sSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::uword >::type s(sSEXP);
    rcpp_result_gen = Rcpp::wrap(routing_matrix(s));
    return rcpp_result_gen;
END_RCPP
}
// model_sample
Rcpp::List model_sample(const arma::umat& ax, const arma::vec& dep_time, const arma::uword sample, const arma::uword warmup, const arma::uword D, const arma::uword print_n);
RcppExport SEXP _odfrid_model_sample(SEXP axSEXP, SEXP dep_timeSEXP, SEXP sampleSEXP, SEXP warmupSEXP, SEXP DSEXP, SEXP print_nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::umat& >::type ax(axSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type dep_time(dep_timeSEXP);
    Rcpp::traits::input_parameter< const arma::uword >::type sample(sampleSEXP);
    Rcpp::traits::input_parameter< const arma::uword >::type warmup(warmupSEXP);
    Rcpp::traits::input_parameter< const arma::uword >::type D(DSEXP);
    Rcpp::traits::input_parameter< const arma::uword >::type print_n(print_nSEXP);
    rcpp_result_gen = Rcpp::wrap(model_sample(ax, dep_time, sample, warmup, D, print_n));
    return rcpp_result_gen;
END_RCPP
}
// max_available_threads
int max_available_threads();
RcppExport SEXP _odfrid_max_available_threads() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(max_available_threads());
    return rcpp_result_gen;
END_RCPP
}
// load
arma::umat load(arma::umat& x);
RcppExport SEXP _odfrid_load(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::umat& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(load(x));
    return rcpp_result_gen;
END_RCPP
}
// sample_od_parallel
void sample_od_parallel();
RcppExport SEXP _odfrid_sample_od_parallel() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    sample_od_parallel();
    return R_NilValue;
END_RCPP
}
// test
arma::umat test(arma::uword N, arma::uword num_threads);
RcppExport SEXP _odfrid_test(SEXP NSEXP, SEXP num_threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::uword >::type N(NSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type num_threads(num_threadsSEXP);
    rcpp_result_gen = Rcpp::wrap(test(N, num_threads));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_odfrid_routing_matrix", (DL_FUNC) &_odfrid_routing_matrix, 1},
    {"_odfrid_model_sample", (DL_FUNC) &_odfrid_model_sample, 6},
    {"_odfrid_max_available_threads", (DL_FUNC) &_odfrid_max_available_threads, 0},
    {"_odfrid_load", (DL_FUNC) &_odfrid_load, 1},
    {"_odfrid_sample_od_parallel", (DL_FUNC) &_odfrid_sample_od_parallel, 0},
    {"_odfrid_test", (DL_FUNC) &_odfrid_test, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_odfrid(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
