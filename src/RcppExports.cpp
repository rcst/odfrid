// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// adjustWithCaps
std::vector<int> adjustWithCaps(const std::vector<int>& x, const std::vector<int>& z);
RcppExport SEXP _odfrid_adjustWithCaps(SEXP xSEXP, SEXP zSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<int>& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::vector<int>& >::type z(zSEXP);
    rcpp_result_gen = Rcpp::wrap(adjustWithCaps(x, z));
    return rcpp_result_gen;
END_RCPP
}
// load
arma::imat load(arma::imat& x);
RcppExport SEXP _odfrid_load(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::imat& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(load(x));
    return rcpp_result_gen;
END_RCPP
}
// routing_matrix
arma::imat routing_matrix(int s);
RcppExport SEXP _odfrid_routing_matrix(SEXP sSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type s(sSEXP);
    rcpp_result_gen = Rcpp::wrap(routing_matrix(s));
    return rcpp_result_gen;
END_RCPP
}
// ztoy
arma::ivec ztoy(arma::ivec z, double v);
RcppExport SEXP _odfrid_ztoy(SEXP zSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::ivec >::type z(zSEXP);
    Rcpp::traits::input_parameter< double >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(ztoy(z, v));
    return rcpp_result_gen;
END_RCPP
}
// rod
List rod(arma::imat& x);
RcppExport SEXP _odfrid_rod(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::imat& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rod(x));
    return rcpp_result_gen;
END_RCPP
}
// roundWithPreservedSum
std::vector<int> roundWithPreservedSum(const std::vector<double>& fn);
RcppExport SEXP _odfrid_roundWithPreservedSum(SEXP fnSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<double>& >::type fn(fnSEXP);
    rcpp_result_gen = Rcpp::wrap(roundWithPreservedSum(fn));
    return rcpp_result_gen;
END_RCPP
}
// uniformSimplexSample
std::vector<double> uniformSimplexSample(int N, double C, double A);
RcppExport SEXP _odfrid_uniformSimplexSample(SEXP NSEXP, SEXP CSEXP, SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< double >::type C(CSEXP);
    Rcpp::traits::input_parameter< double >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(uniformSimplexSample(N, C, A));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_odfrid_adjustWithCaps", (DL_FUNC) &_odfrid_adjustWithCaps, 2},
    {"_odfrid_load", (DL_FUNC) &_odfrid_load, 1},
    {"_odfrid_routing_matrix", (DL_FUNC) &_odfrid_routing_matrix, 1},
    {"_odfrid_ztoy", (DL_FUNC) &_odfrid_ztoy, 2},
    {"_odfrid_rod", (DL_FUNC) &_odfrid_rod, 1},
    {"_odfrid_roundWithPreservedSum", (DL_FUNC) &_odfrid_roundWithPreservedSum, 1},
    {"_odfrid_uniformSimplexSample", (DL_FUNC) &_odfrid_uniformSimplexSample, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_odfrid(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
