devtools::load_all()
devtools::load_all()
devtools::load_all()
rod(1:10)
rod(1:10)
rod(1:10)
rod(1:10)
devtools::load_all()
devtools::load_all()
rod(1:10)
install.packages("rim")
library(rim)
maxima.repl()
maxima.get("solve(j= S * (i-1) - i * (i+1) / 2 + k, k)")
maxima.get("assume(j=i+1)")
maxima.get("j = i+1")
maxima.get("solve(j= S * (i-1) - i * (i+1) / 2 + k, k)")
maxima.get("subst(%o4, j=i+1)")
maxima.get("eq: j = S * (i-1) - i * (i+1) / 2 + k")
maxima.get("subst([eq], j=i+1)")
maxima.get("solve(eq, k)")
maxima.get("eq: j = S * (i-1) - i * (i+1) / 2 + k")
maxima.get("eqn: subst([eq], j=i+1)")
maxima.get("solve(eqn, k)")
maxima.repl()
maxima.get("subst([S = 6, i = [1, 2, 3, 4, 5]], eqn)")
maxima.repl()
maxima.get("eq: j = S * (i-1) - i * (i+1) / 2 + k")
maxima.get("eqn: subst([eq], j=i+1)")
maxima.get("y: solve(eqn, k)")
maxima.get("subst([S = 6, i = [1, 2, 3, 4, 5]], k)")
maxima.get("subst([S = 6, i = [1, 2, 3, 4, 5]], y)")
maxima.get("subst([S = 4, i = [1, 2, 3]], y)")
maxima.get("subst([S = 4, i = [1, 2, 3, 4]], y)")
maxima.get("y: solve(eq, k)")
fk <- maxima.get("y: solve(eq, k)")
print(fk)
library(data.table)
S <- 6L
dt <- data.table(k = 1:((S^2-S)/2))
print(dt)
dt <- data.table(idx = 1:((S^2-S)/2))
maxima.start(restart = TRUE)
maxima.get("eqB: k = i + 1")
maxima.get("eqA: j = S * (i-1) - i * (i+1) / 2 + k")
maxima.get("assume(k >= i + 1)")
maxima.get("assume(k >= i + 1, k <= S)")
NvimR.selection(echo=TRUE)
maxima.start(restart = TRUE)
maxima.get("eq: j = S * (i-1) - i * (i+1) / 2 + k")
maxima.get("assume(i>=1, i<=S)")
maxima.get("assume(k>=i+1, k<=S)")
maxima.get("solve(eq, k)")
maxima.get("solve(eq, i)")
maxima.get("solve(eq, j)")
maxima.get("assume(j = i + 1)")
maxima.get("assume(j == i + 1)")
maxima.get("assume(equal(j,i + 1))")
maxima.get("solve(eq, j)")
maxima.get("solve(eq, i)")
maxima.get("solve(eq, j)")
maxima.start(restart = TRUE)
maxima.get("eqA: j = S * (i-1) - i * (i+1) / 2 + k")
maxima.get("eqB: idx = k - 1")
maxima.get("assume(i>=1, i<=S)")
maxima.get("assume(k>=i+1, k<=S)")
maxima.get("assume(equal(j,i + 1))")
maxima.get("solve([eqA, eqB], idx)")
NvimR.selection(echo=TRUE)
maxima.get("solve([eqA, eqB], idx)")
maxima.get("solve([eqA], idx)")
maxima.get("solve([eqA], k)")
maxima.start(restart = TRUE)
maxima.get("solve([eq], k)")
maxima.start(restart = TRUE)
maxima.get("eq: j = S * (i-1) - i * (i+1) / 2 + k")
maxima.get("solve([eq], k)")
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
rod(x = c(seq(5,1), seq(1,5))
)
x <- c(seq(5, 1), seq(1, 5))
ll <- rod(x)
w <- w(x)
devtools::load_all()
x <- c(seq(5, 1), seq(1, 5))
ll <- rod(x)
w <- w(x)
print(w)
x <- c(seq(5, 0), seq(0, 5))
ll <- rod(x)
w <- w(x)
print(w)
x <- c(seq(6, 0), seq(0, 6))
ll <- rod(x)
x <- c(seq(4, 0), seq(0, 4))
ll <- rod(x)
w <- w(x)
print(w)
print(x)
routing_matrix(S)
S <- 5
x <- c(seq(S-1, 0), seq(0, S-1))
ll <- rod(x)
w <- w(x)
routing_matrix(S) %*% ll[["y"]]
print(w)
routing_matrix(S) * ll[["y"]]
routing_matrix(S) %*% ll[["y"]]
x <- c(seq(S-1, 0), seq(0, S-1))
print(x)
w_check <- w(x)
w <- routing_matrix(S) %*% ll[["y"]]
stopifnot(length(w) == length(w_check))
print(w_check)
x_check <- routing_matrix(S) %*% ll[["y"]]
stopifnot(length(x) == length(x_check))
ll[["z"]]
routing_matrix(S)
S <- 6
x <- c(seq(S-1, 0), seq(0, S-1))
ll <- rod(x)
ll[["z"]]
routing_matrix(S)
devtools::load_all()
devtools::load_all()
devtools::load_all()
NvimR.selection(echo=TRUE)
devtools::load_all()
S <- 6
x <- c(seq(S-1, 0), seq(0, S-1))
ll <- rod(x)
ll[["z"]]
x_check <- routing_matrix(S) %*% ll[["y"]]
stopifnot(length(x) == length(x_check))
print(x_check)
devtools::load_all()
ll <- rod(x)
devtools::load_all()
ll <- rod(x)
devtools::load_all()
ll <- rod(x)
devtools::load_all()
ll <- rod(x)
devtools::load_all()
ll <- rod(x)
x_check <- routing_matrix(S) %*% ll[["y"]]
stopifnot(length(x) == length(x_check))
print(x_check)
stopifnot(x == x_check)
stopifnot(x == x)
stopifnot(x == x_check)
ll[["y"]]
ll[["z"]]
ll <- rod(x)
devtools::load_all()
ll <- rod(x)
x_check <- routing_matrix(S) %*% ll[["y"]]
stopifnot(x == x_check)
print(x_check)
print(x_check)
rod(x)[["y"]]
rod(x)[["y"]]
rod(x)[["y"]]
rod(x)[["y"]]
rod(x)[["y"]]
rod(x)[["y"]]
rod(x)[["y"]]
rod(x)[["y"]]
rod(x)[["y"]]
rod(x)[["y"]]
rod(x)[["y"]]
rod(x)[["y"]]
rod(x)[["y"]]
rod(x)[["y"]]
rod(x)[["y"]]
rod(x)[["y"]]
rod(x)[["y"]]
print(x)
print(x_check)
x_check <- t(routing_matrix(S) %*% ll[["y"]])
print(x_check)
print(x)
x_check <- as.vector(routing_matrix(S) %*% ll[["y"]])
print(x_check)
print(x)
ll <- rod(x)
x_check <- as.vector(routing_matrix(S) %*% ll[["y"]])
stopifnot(x == x_check)
x
x_check
ll[["y"]]
ll[["y"]] |> as.vector()
routing_matrix(S)
x_check
ll[["y"]] |> as.vector()
routing_matrix(S) %*% t(ll[["y"]])
routing_matrix(S) * t(ll[["y"]])
dim(routing_matrix(A))
dim(routing_matrix(S))
dim(ll[["y"]])
ll[["y"]]
ll[["y"]] |> as.vector()
rbinom(1, 1:5, 0.5)
maxima.start(restart = TRUE)
maxima.get("eq: j = S * (i-1) - i * (i+1) / 2 + k")
maxima.get("solve([eq], k)")
fk <- maxima.get("solve([eq], k)")
maxima.eval(fk, envir = list(i = 1:5, j = 1:5))
maxima.repl()
